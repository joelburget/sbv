# NB: don't set `language: haskell` here
language: c
dist: trusty
sudo: false

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.cabal/packages
  timeout: 1000 

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar

notifications:
  email:
    - erkokl@gmail.com
  on_success: always
  on_failure: always

matrix:
  include:
    - env: CABALVER=2.0 GHCVER=8.2.2 HAPPYVER=1.19.5 SBV_EXTRA_CHECKS=True SBV_HEAVYTEST_PERCENTAGE=15
      compiler: ": #GHC 8.2.2"
      addons: {apt: {packages: [cabal-install-2.0,ghc-8.2.2,alex-3.1.7,happy-1.19.5], sources: [hvr-ghc]}}

    - env: CABALVER=2.0 GHCVER=8.4.3 HAPPYVER=1.19.5 SBV_EXTRA_CHECKS=True SBV_HEAVYTEST_PERCENTAGE=60
      compiler: ": #GHC 8.4.3"
      addons: {apt: {packages: [cabal-install-2.0,ghc-8.4.3,alex-3.1.7,happy-1.19.5], sources: [hvr-ghc]}}

    - os: osx
      env: CABALVER=2.0 GHCVER=8.4.4 HAPPYVER=1.19.5 SBV_EXTRA_CHECKS=False SBV_HEAVYTEST_PERCENTAGE=15
      compiler: ": #GHC 8.4.4"

# Note: the distinction between `before_install` and `install` is not important.
before_install:
 - unset CC
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:~/.cabal/bin:$PATH
 - export PATH=/opt/happy/$HAPPYVER/bin:$PATH
 - export TASTY_HIDE_SUCCESSES=True 
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
     export Z3=`wget -q -O- http://github.com/Z3Prover/bin/raw/master/nightly | grep 'z3.*x64.*ubuntu.*.zip<' | awk '{print $7}' | awk -F= '{print $2}' | head -1 | awk -F\" '{print $2}'`;
     export SBV_TEST_ENVIRONMENT=linux;
     echo "Linux Z3 $Z3";
   fi
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
     brew update;
     brew install ghc cabal-install;
     cabal update;
     cabal install happy;
     export Z3=`wget -q -O- http://github.com/Z3Prover/bin/raw/master/nightly | grep 'z3.*x64.*osx.*.zip<' | awk '{print $7}' | awk -F= '{print $2}' | head -1 | awk -F\" '{print $2}'`;
     export SBV_TEST_ENVIRONMENT=osx;
     echo "OSX Z3 $Z3";
     cabal install --only-dependencies --enable-tests --enable-benchmarks;
   fi
 - export Z3Base=`basename $Z3 .zip`
 - wget --quiet -L -O z3.zip http://github.com/Z3Prover/bin/raw/master/nightly/`basename $Z3`
 - unzip -q z3.zip -d z3_downloaded
 - /bin/rm z3.zip
 - export PATH=$PATH:$PWD/z3_downloaded/$Z3Base/bin
 - z3 --version

install:

 # display versions
 - cabal --version
 - happy --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"

 # install
 - if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
   then
     gunzip -c $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz >
               $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
   fi
 - travis_retry cabal update
 - "sed -itravis_backup -e 's/^jobs:.*$/jobs: 2/' $HOME/.cabal/config"
 - cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v --max-backjumps=-1 > installplan.txt
 - sed -itravis_backup -e '1,/^Resolving /d' installplan.txt; cat installplan.txt

# check whether current requested install-plan matches cached package-db snapshot
 - if diff -u installplan.txt $HOME/.cabsnap/installplan.txt;
   then
     echo "cabal build-cache HIT";
     rm -rfv .ghc;
     cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
     cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
   else
     echo "cabal build-cache MISS";
     rm -rf $HOME/.cabsnap;
     mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
     cabal install --only-dependencies --enable-tests --enable-benchmarks;
   fi

# snapshot package-db on cache miss
 - if [ ! -d $HOME/.cabsnap ];
   then
      echo "snapshotting package-db to build-cache";
      mkdir $HOME/.cabsnap;
      cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
      cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin installplan.txt $HOME/.cabsnap/;
   fi

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
 - cabal configure --enable-tests --enable-benchmarks -v2 # -v2 provides useful information for debugging
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - travis_wait 60 cabal test SBVTest
 - travis_wait 60 cabal test SBVDocTest
 - travis_wait 60 cabal test SBVHLint
 - cabal check
 - cabal sdist   # tests that a source-distribution can be generated

# Check that the resulting source distribution can be built & installed.
# If there are no other `.tar.gz` files in `dist`, this can be even simpler:
# `cabal install --force-reinstalls dist/*-*.tar.gz`
 - if [[ "$SBV_EXTRA_CHECKS" == "True" ]]; then
     SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz && (cd dist && cabal install --force-reinstalls "$SRC_TGZ");
   fi
