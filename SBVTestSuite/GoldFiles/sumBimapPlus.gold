** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] (declare-datatypes ((SBVSum2 2)) (
         (par (X Y) ( (left (getLeft X)) (right (getRight Y)) ))
       ))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () Int 1)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (SBVSum2 Int Int)) ; tracks user variable "x"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s1 () Bool ((_ is left) s0))
[GOOD] (define-fun s2 () Int (getLeft s0))
[GOOD] (define-fun s4 () Int (+ s2 s3))
[GOOD] (define-fun s5 () (SBVSum2 Int Int) (left s4))
[GOOD] (define-fun s6 () Int (getRight s0))
[GOOD] (define-fun s7 () Int (+ s3 s6))
[GOOD] (define-fun s8 () (SBVSum2 Int Int) (right s7))
[GOOD] (define-fun s9 () (SBVSum2 Int Int) (ite s1 s5 s8))
[GOOD] (define-fun s10 () Bool ((_ is left) s9))
[GOOD] (define-fun s11 () Int (getLeft s9))
[GOOD] (define-fun s12 () Int (getRight s9))
[GOOD] (define-fun s13 () Int (ite s10 s11 s12))
[GOOD] (define-fun s14 () Int (ite s1 s2 s6))
[GOOD] (define-fun s15 () Int (+ s3 s14))
[GOOD] (define-fun s16 () Bool (= s13 s15))
[GOOD] (assert s16)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
